<?php

namespace {{ table.schema.namespace }}\Base;

use Rocket\ORM\Rocket;
use Rocket\ORM\Model\Query\Query;

/**
 * Generated by Rocket ORM.
 * Do not edit this file, use the generation command instead.
 *
 * "{{ table.schema.database }}.{{ table.name }}" base query model
 */
class Base{{ table.phpName }}Query extends Query
{
    const MODEL_NAMESPACE = '\\{{ table.schema.escapedNamespace }}\\{{ table.phpName }}';

    /**
     * @param string $alias The query alias
     *
     * @return \{{ table.schema.namespace }}\{{ table.phpName }}Query
     */
    public static function create($alias = '{{ table.phpName }}')
    {
        return new self($alias, self::MODEL_NAMESPACE);
    }

    public function find(\PDO $con = null)
    {
        $query = 'SELECT '
            {% for i,column in table.columns -%}
            {%- if loop.last -%}
                . $this->alias . '.{{ column.name }}'
            {%- else -%}
                . $this->alias . '.{{ column.name }}, '
            {% endif -%}
        {%- endfor -%}
        {{ "\n        " }};

        $hasWith = 0 < count($this->with);
        if ($hasWith) {
            foreach ($this->with as $with) {
                /** @var \Rocket\ORM\Model\Map\TableMapInterface $relationTableMap */
                $relationTableMap = Rocket::getTableMap($this->joins[$with['alias']]['relation']['table_map_namespace']);
                foreach ($relationTableMap->getColumns() as $column) {
                    $query .= ', ' . $with['alias'] . '.' . $column['name'] . ' AS "' . $with['alias'] . '.' . $column['name'] . '"';
                }

                unset($relationTableMap);
            }
        }

        $query .= ' FROM `{{ table.schema.database }}`.`{{ table.name }}` AS ' . $this->alias;

        if (0 < count($this->joins)) {
            foreach ($this->joins as $alias => $join) {
                /** @var \Rocket\ORM\Model\Map\TableMapInterface $relationTableMap */
                $tableMap = Rocket::getTableMap($join['relation']['table_map_namespace']);
                $query .= ' ' . $join['type'] . ' JOIN ' . $tableMap->getTableName() . ' ' . $alias .
                ' ON ' . $join['from'] . '.' . $join['relation']['local'] . ' = ' . $alias . '.' . $join['relation']['foreign'];

                unset($tableMap);
            }
        }

        $hasClauses = 0 < count($this->clauses);
        if ($hasClauses) {
            $query .= ' WHERE ';

            $i = 0;
            foreach ($this->clauses as $clauseParams) {
                if (0 == $i) {
                    if (null != $clauseParams['value']) {
                        $query .= sprintf('%s :param_%d', trim(substr($clauseParams['clause'], 0, -1)), $i);
                    } else {
                        $query .= $clauseParams['clause'];
                    }
                }
                else {
                    if (null != $clauseParams['value']) {
                        $query .= sprintf(' %s %s :param_%d', $clauseParams['operator'], trim(substr($clauseParams['clause'], 0, -1)), $i);
                    } else {
                        $query .= $clauseParams['operator'] . ' ' . $clauseParams['clause'];
                    }
                }

                ++$i;
            }
        }

        if (null != $this->limit) {
            $query .= ' LIMIT ' . $this->limit;

            if (null != $this->offset) {
                $query .= ',' . $this->offset;
            }
        }

        try {
            if (null == $con) {
                $con = Rocket::getConnection($this->getTableMap()->getConnectionName());
            }

            $stmt = $con->prepare($query);
            if ($hasClauses) {
                foreach ($this->clauses as $i => $clauseParams) {
                    $stmt->bindValue(':param_' . $i, $clauseParams['value'], \PDO::PARAM_STR);
                }
            }

            $stmt->execute();
        } catch (\Exception $e) {
            throw $e;
        }

        $objects = [];
        while ($row = $stmt->fetch(\PDO::FETCH_ASSOC)) {
            if ($hasWith) {
                $tmpRow = [];
                foreach ($row as $columnName => $value) {
                    if (false !== strpos($columnName, '.')) {
                        $params = explode('.', $columnName);
                        $this->hydrateRelationValue($tmpRow, $params[0], $params[1], $value, $this->with[$params[0]]['from']);
                    } else {
                        $tmpRow[$columnName] = $value;
                    }
                }

                $row = $tmpRow;
                unset($tmpRow);
            }

            //$objects[] = new RocketObject($row, self::MODEL_NAMESPACE);
            $objects[] = $row;
        }

        $stmt->closeCursor();
        $this->clear();

        if (1 === $this->limit) {
            return $objects[0];
        }

        return $objects;
    }
}
