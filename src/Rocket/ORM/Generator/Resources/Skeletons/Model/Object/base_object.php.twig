<?php

namespace {{ table.schema.namespace }}\Base;

{% set baseModel = 'Model' %}
{% if 'Model' == table.phpName -%}
    use Rocket\ORM\Model\Model as RocketBaseModel;
    {% set baseModel = 'BaseModel' %}
{% elseif 'BaseModel' == table.phpName -%}
    use Rocket\ORM\Model\Model as RocketBaseModel;
    {% set baseModel = 'RocketBaseModel' %}
{% else -%}
    use Rocket\ORM\Model\Model;
{% endif %}

{% block comment %}
/**
 * Generated by Rocket ORM.
 * Do not edit this file, use the generation command instead.
 *
 * "{{ table.schema.database }}.{{ table.name }}" base model
 */
{% endblock %}
class Base{{ table.phpName }} extends {{ baseModel }}
{
    {% for column in table.columns -%}
        {{ column.attributePhpDoc }}
    protected ${{ column.phpName }};

    {% endfor %}

    /**
     * @param array $values
     *
     * @return void
     */
    public function hydrate(array $values)
    { {% for column in table.columns %}

        if (isset($values['{{ column.name }}'])) {
            $this->{{ column.phpName }} = $values['{{ column.name }}'];
        }
    {% endfor -%}
    }

    /**
     * @param \PDO $con
     *
     * @throws \RuntimeException
     */
    public function doInsert(\PDO $con)
    {
        if (true === $this->_isNew) {
            throw new \RuntimeException('Cannot insert an already saved object');
        }

        $stmt = $con->prepare('INSERT INTO `{{ table.schema.database }}.{{ table.name }}` (
            {%- for column in table.columns -%}
                `{{ column.name }}`
                {%- if not loop.last %}, {% endif %}
            {%- endfor -%}
        ) VALUES (
            {%- for column in table.columns -%}
                :{{ column.name }}
                {%- if not loop.last %}, {% endif %}
            {%- endfor -%}
        )');

        {%- for column in table.columns -%}
            {{ "\n        " }}$stmt->bindValue(':{{ column.name }}', $this->{{ column.phpName }}, \PDO::PARAM_{{ constant('\\Rocket\\ORM\\Model\\Map\\TableMap::COLUMN_TYPE_INTEGER') == column.type ? 'INT' : 'STR' }});
        {%- endfor %}

        {%- for primaryKey in table.primaryKeys -%}
            {% if primaryKey.isAutoIncrement -%}
                {{ "\n\n        " }}$this->{{ primaryKey.phpName }} = $con->lastInsertId();
            {%- endif -%}
        {%- endfor %}

    }

    {%- for column in table.columns -%}
        {{ "\n\n    " }}/**
     * @return {{ column.columnTypePhpDoc }}
     */
    public function get{{ column.methodName }}()
    {
        return $this->{{ column.phpName }};
    }

    /**
     * @param {{ column.columnTypePhpDoc }} ${{ column.phpName }}
     *
     * @return $this
     */
    public function set{{ column.methodName }}(${{ column.phpName }})
    {
        $this->{{ column.phpName }} = ${{ column.phpName }};

        return $this;
    }
    {%- endfor %}

}
